From 61a1cf2fe33638e1a83a4365a4f2a9ec2dcb1323 Mon Sep 17 00:00:00 2001
From: Ignacio Casal Quinteiro <icq@gnome.org>
Date: Thu, 9 Apr 2015 18:05:18 +0200
Subject: [PATCH] Change message system to use fputs instead of write

By default g_log_default_handler always assumes that stdout
and stderr are file descriptors 1 and 2. On Win32 this isn't
always the case as the win32 API functions AttachConsole and
freopen can be used to dynamically attach GUI applications to
a console and the file descriptors of stderr and stdout will
become different than 1 and 2.

Fix it by using fputs with the FILE directly instead of
using the file descriptors.

https://bugzilla.gnome.org/show_bug.cgi?id=692085
---
 glib/gmessages.c | 41 +++++++++++++++++++----------------------
 1 file changed, 19 insertions(+), 22 deletions(-)

diff --git a/glib/gmessages.c b/glib/gmessages.c
index c1b5622..1ce6ab1 100644
--- a/glib/gmessages.c
+++ b/glib/gmessages.c
@@ -351,13 +351,10 @@ dowrite (int          fd,
 #endif
 
 static void
-write_string (int          fd,
+write_string (FILE        *stream,
 	      const gchar *string)
 {
-  int res;
-  do 
-    res = write (fd, string, strlen (string));
-  while (G_UNLIKELY (res == -1 && errno == EINTR));
+  fputs (string, stream);
 }
 
 static GLogDomain*
@@ -841,7 +838,7 @@ format_unsigned (gchar  *buf,
 /* these are filtered by G_MESSAGES_DEBUG by the default log handler */
 #define INFO_LEVELS (G_LOG_LEVEL_INFO | G_LOG_LEVEL_DEBUG)
 
-static int
+static FILE *
 mklevel_prefix (gchar          level_prefix[STRING_BUFFER_SIZE],
 		GLogLevelFlags log_level)
 {
@@ -892,7 +889,7 @@ mklevel_prefix (gchar          level_prefix[STRING_BUFFER_SIZE],
   if ((log_level & G_LOG_FLAG_FATAL) != 0 && !g_test_initialized ())
     win32_keep_fatal_message = TRUE;
 #endif
-  return to_stdout ? 1 : 2;
+  return to_stdout ? stdout : stderr;
 }
 
 typedef struct {
@@ -1242,7 +1239,7 @@ _g_log_fallback_handler (const gchar   *log_domain,
 #ifndef G_OS_WIN32
   gchar pid_string[FORMAT_UNSIGNED_BUFSIZE];
 #endif
-  int fd;
+  FILE *stream;
 
   /* we cannot call _any_ GLib functions in this fallback handler,
    * which is why we skip UTF-8 conversion, etc.
@@ -1251,7 +1248,7 @@ _g_log_fallback_handler (const gchar   *log_domain,
    * the process ID unconditionally however.
    */
 
-  fd = mklevel_prefix (level_prefix, log_level);
+  stream = mklevel_prefix (level_prefix, log_level);
   if (!message)
     message = "(NULL) message";
 
@@ -1260,24 +1257,24 @@ _g_log_fallback_handler (const gchar   *log_domain,
 #endif
 
   if (log_domain)
-    write_string (fd, "\n");
+    write_string (stream, "\n");
   else
-    write_string (fd, "\n** ");
+    write_string (stream, "\n** ");
 
 #ifndef G_OS_WIN32
-  write_string (fd, "(process:");
-  write_string (fd, pid_string);
-  write_string (fd, "): ");
+  write_string (stream, "(process:");
+  write_string (stream, pid_string);
+  write_string (stream, "): ");
 #endif
 
   if (log_domain)
     {
-      write_string (fd, log_domain);
-      write_string (fd, "-");
+      write_string (stream, log_domain);
+      write_string (stream, "-");
     }
-  write_string (fd, level_prefix);
-  write_string (fd, ": ");
-  write_string (fd, message);
+  write_string (stream, level_prefix);
+  write_string (stream, ": ");
+  write_string (stream, message);
 }
 
 static void
@@ -1378,7 +1375,7 @@ g_log_default_handler (const gchar   *log_domain,
 {
   gchar level_prefix[STRING_BUFFER_SIZE], *string;
   GString *gstring;
-  int fd;
+  FILE *stream;
   const gchar *domains;
 
   if ((log_level & DEFAULT_LEVELS) || (log_level >> G_LOG_LEVEL_USER_SHIFT))
@@ -1398,7 +1395,7 @@ g_log_default_handler (const gchar   *log_domain,
       return;
     }
 
-  fd = mklevel_prefix (level_prefix, log_level);
+  stream = mklevel_prefix (level_prefix, log_level);
 
   gstring = g_string_new (NULL);
   if (log_level & ALERT_LEVELS)
@@ -1449,7 +1446,7 @@ g_log_default_handler (const gchar   *log_domain,
 
   string = g_string_free (gstring, FALSE);
 
-  write_string (fd, string);
+  write_string (stream, string);
   g_free (string);
 }
 
-- 
2.3.5

